<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.QuestionAnswerDao">

    <resultMap type="io.renren.entity.QuestionAnswerEntity" id="questionAnswerMap">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="question" column="question"/>
        <result property="answer" column="answer"/>
        <result property="createTime" column="create_time"/>
        <result property="quesTokens" column="ques_tokens"/>
        <result property="ansTokens" column="ans_tokens"/>
        <result property="allTokens" column="all_tokens"/>
        <result property="type" column="type"/>
    </resultMap>
    <select id="queryQuestionAnswerList" resultType="io.renren.entity.QuestionAnswerEntity">
        select * from tb_question_answer where user_id = #{value} ORDER BY create_time desc LIMIT 500
    </select>
    <select id="queryQuestionAnswerListPage" resultType="io.renren.entity.QuestionAnswerEntity">
        select * from tb_question_answer where user_id = #{userId} ORDER BY create_time desc LIMIT #{pageNum},10
    </select>
    <select id="count3And4TodayByUser" resultType="io.renren.vo.TodayQsCount" parameterType="java.lang.Long">
        SELECT
            COUNT(
                    IF
                        ( type = 0, 1, null )) AS threeCuont,
            COUNT(
                    IF
                        ( type = 1, 1, null )) AS fourCuont
        FROM
            tb_question_answer
        WHERE
                to_days( create_time ) = to_days(
                    now()) AND user_id = #{value}
    </select>

    <select id="getFirstQuestionPerConversation" resultType="io.renren.dto.ConversationDTO"  parameterType="long">
--         SELECT
--             t1.conversation_id AS conversationId,
--             MIN(t1.create_time) AS createTime,
--             (
--                 SELECT question
--                 FROM tb_question_answer t2
--                 WHERE t2.conversation_id = t1.conversation_id
--                 ORDER BY t2.id ASC
--                                   LIMIT 1
--             ) AS firstQuestion
--         FROM tb_question_answer t1
--         GROUP BY t1.conversation_id
        SELECT conversation_id  AS conversationId, question AS firstQuestion, create_time  AS createTime
        FROM (
                 SELECT *,
                        ROW_NUMBER() OVER (PARTITION BY conversation_id ORDER BY id ASC) AS rn
                 FROM tb_question_answer  WHERE user_id = #{userId}
             ) AS sub
        WHERE rn = 1 ORDER BY create_time DESC;
    </select>

</mapper>